nuxt_p/                             # プロジェクトのルートディレクトリ
├── .vscode/                        # エディターの設定ファイル（Pritterを適用するのに使用）
│   └── settings.json
├── db/                             # dbサービス関連のファイル（今回は未使用）
├── web/                            # webサービス関連のファイル
│   ├── .nuxt/                      # Nuxt自動生成物（グローバルコンポーネントなどのコンフィグ）
│   ├── .output/                    # Nuxt自動生成物（ビルド後の静的生成物など）
│   ├── app/                        # アプリケーション固有のテンプレートやリソース
│   │   └── spa-loading-template.html
│   ├── assets/                     # 全体で使用するstyleなど
│   │   └── styles/                 # グローバルstyle
│   │       └── global.css
│   ├── components/                 # 共通コンポーネント
│   ├── composables/                # UI固有のロジックや、状態管理、API 通信、サイドエフェクトの処理などをコンポーネント間で共通化する
│   ├── constants/                  # サーバー・クライアントどちらでも共通して利用する定数リソース
│   ├── layouts/                    # 共通レイアウト（ヘッダー、フッター、サイドバーなど）
│   ├── node_modules/               # webサービスの依存関係
│   ├── pages/                      # ルーティング先の各機能画面のvueファイル
│   │   ├── hoge/                   # hoge
│   │   ├── fuga/                   # fuga
│   │   ├── [...notFound].vue
│   │   └── index.vue
│   ├── prisma/                     # Prisma ORM のDBスキーマ定義やマイグレーションなど
│   │   ├── migrations/             # マイグレーションファイル
│   │   │   ├── 20250311025512_init/
│   │   │   │   └── migration.sql
│   │   │   └── migration_lock.toml
│   │   └── schema.prisma
│   ├── public/                     #　公開用の静的ファイル
│   │   ├── favicon.ico
│   │   └── robots.txt
│   ├── server/                     # ServerSide関連ファイル
│   │   ├── _docs/                  # ServerSideのドキュメント
│   │   │   └── openapi_back_office_user.yml
│   │   ├── api/                    # APIエンドポイント（必要なパラメータのパースやエラーハンドリングを行った上でControllerを呼び出すだけの薄いラッパー）
│   │   │   └── sample/             # サンプル用（ゆくゆくは削除予定）
│   │   │       └── users.ts
│   │   ├── config/                 # 環境設定やDB接続、外部サービスとの連携設定など（PrismaClient初期化など）
│   │   ├── controllers/            # apiのラッパーから呼ばれ、リクエストの内容に応じた入力検証や変換を行い、ビジネスロジックを担当するservicesの機能を呼ぶ
│   │   ├── dtos/                   # データ転送オブジェクト（DTO：リクエストの形式やレスポンスの形式定義。コントローラやサービス内で、リクエストデータの検証や変換のために利用）
│   │   ├── middlewares/            # HTTP リクエストの前後処理（例: 認証、ログ、エラーハンドリング、リクエスト検証など）を行う関数を配置
│   │   ├── models/                 # アプリケーションの内部ロジック用のドメインモデルやビジネスロジックに沿ったエンティティモデル定義
│   │   ├── repositories/           # データベースアクセスや外部APIとの通信など、データ取得・永続化の処理
│   │   ├── services/               # ユースケース／アプリケーションのビジネスロジックを実装する層
│   │   └── tsconfig.json
│   ├── types/                      # サーバー・クライアント共通の純粋な型定義やインターフェース（e.g. シンプルな型やAPIレスポンスの形式など）
│   ├── utils/                      # サーバー・クライアント共通の汎用処理
│   ├── .env
│   ├── .prettierignore
│   ├── .prettierrc
│   ├── app.vue
│   ├── Dockerfile # 今回は入れていない
│   ├── eslint.config.mjs
│   ├── nuxt.config.ts
│   ├── package-lock.json
│   ├── package.json
│   └── tsconfig.json
├── .gitignore
├── docker-compose.yml  # 今回は入れていない
└── README.md


    │   ├── components/                 # 汎用コンポーネント群
    │   │   ├── SingleCardLogin.vue     # ログイン・初期パスワード設定用のカードコンポーネント
    │   │   ├── MenuLayoutForGeneral.vue  # ログイン後の共通ヘッダー・レイアウト
    │   │   ├── ContentBackground.vue   # 各画面の背景（ヘッダー下の領域）
    │   │   ├── ContentCard.vue         # 各画面のコンテンツ表示用カードコンポーネント
    │   │   ├── ProgressBar.vue         # 処理状況を示すプログレスバー
    │   │   ├── MenuSelectBox.vue       # メニュー用セレクトボックス
    │   │   ├── LinkText.vue            # リンク表示用テキストコンポーネント
    │   │   ├── CreditText.vue          # クレジット表記用テキスト
    │   │   ├── Button.vue              # 用途に応じたスタイル変更可能なボタン
    │   │   ├── Toast.vue               # 処理成功／エラー時のトースト表示
    │   │   ├── LabelText.vue           # ラベル用テキストコンポーネント
    │   │   ├── LabeledInputBox.vue     # ラベル付き入力ボックス（文字入力）
    │   │   ├── InputBox.vue            # 単体の入力ボックス
    │   │   ├── LabeledSelectBox.vue    # ラベル付きセレクトボックス
    │   │   ├── SelectBox.vue           # 単体のセレクトボックス
    │   │   ├── LabeledCheckBox.vue     # ラベル付きチェックボックス
    │   │   ├── CheckBox.vue            # 単体のチェックボックス
    │   │   ├── ConfirmationDialog.vue  # 確認ダイアログ
    │   │   ├── TableComponent.vue      # 一覧表示用のテーブル部品
    │   │   ├── ImageDisplay.vue        # SVG/png 画像表示用コンポーネント
    │   │   └── IconDisplay.vue         # アイコン表示用コンポーネント